Microsoft (R) Macro Assembler Version 14.37.32825.0	    12/09/23 21:48:23
olympians.asm						     Page 1 - 1


				; 
				; Load a list of olympians into an array of structs
				; print them out, calculating the olympian's total medals
				;
				; Name: PETER SCHAEFER
				; 

				include Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;;;; define some constants
 = 00000096			FSIZE = 150				; max file name size
 = 0000000D			CR = 0Dh				; c/r
 = 0000000A			LF = 0Ah				; line feed
 = 0000002A			ASTERISK = 2Ah			; asterisk for new entry
 = 00000000			NULL = 00h				; null character
 = 00000020			SPACE = 20h				; space character
 = 00000020			STRSIZE = 32			; string sizes in struct
 = 00000003			NUMTESTS = 3			; number of olympian medals
 = 00000001			ROUND = 1				; cutoff for rounding

				MEDAL TYPEDEF DWORD		; just in case you don't want a medal to be a DWORD

 0000004C			olympian STRUCT
 00000000  00000020 [			sname BYTE STRSIZE DUP('n')		; 32 bytes	
	    6E
	   ]
 00000020  00000020 [			country BYTE STRSIZE DUP('c')	; 32
	    63
	   ]
 00000040  00000003 [			medals MEDAL NUMTESTS DUP(0)	; NUMTESTS x 4
	    00000000
	   ]
				olympian ENDS						; 76 total

 00000000			.data
 00000000  00000096 [		filename BYTE FSIZE DUP(?)							; array to hold the file name
	    00
	   ]
 00000096 00000000		filehandle DWORD 0									; the file handle
 0000009A 45 6E 74 65 72	prompt1 BYTE "Enter the number of olympians: ",0	; prompt for a string
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 6F 66 20
	   6F 6C 79 6D 70
	   69 61 6E 73 3A
	   20 00
 000000BA 45 6E 74 65 72	prompt2 BYTE "Enter a filename: ",0					; prompt for a string
	   20 61 20 66 69
	   6C 65 6E 61 6D
	   65 3A 20 00
 000000CD 49 6E 76 61 6C	ferror BYTE "Invalid input...",0					; error message
	   69 64 20 69 6E
	   70 75 74 2E 2E
	   2E 00
 000000DE 46 61 74 61 6C	perror BYTE "Fatal program error...",0				; internal error
	   20 70 72 6F 67
	   72 61 6D 20 65
	   72 72 6F 72 2E
	   2E 2E 00

 000000F5 00000000		maxnum DWORD 0		; max number of olympians
 000000F9 00000000		slistptr DWORD 0	; pointer to olympian list
 000000FD 00000000		numread	DWORD 0		; number of olympians loaded

				;;;; for output listing (these can be used as globals)
 00000101 4F 6C 79 6D 70	outname  BYTE "Olympian: ",0
	   69 61 6E 3A 20
	   00
 0000010C 43 6F 75 6E 74	outcountry BYTE "Country: ",0
	   72 79 3A 20 00
 00000116 4D 65 64 61 6C	outmedals  BYTE "Medals: ",0
	   73 3A 20 00

 00000000			.code
 00000000			main PROC
 00000000			REPROMPT_NUM:
					;;;; prompt for the number of olympians
 00000000  BA 0000009A R	    mov edx, OFFSET prompt1			; output the prompt
 00000005  E8 00000000 E		call WriteString				; uses edx 
 0000000A  E8 00000000 E		call ReadInt					; get the maximium number of olympians
 0000000F  71 11			jno ACCEPT_NUM
 00000011  BA 000000CD R		mov edx, OFFSET ferror
 00000016  E8 00000000 E		call WriteString
 0000001B  E8 00000000 E		call Crlf						; newline
 00000020  EB DE			jmp REPROMPT_NUM

 00000022			ACCEPT_NUM:
 00000022  A3 000000F5 R		mov maxnum, eax					; save it

					;;;; access the heap and allocate memory for olympian struct array
 00000027  FF 35 000000F5 R		push maxnum						; push value as argument of allocOlympians
 0000002D  E8 000000B5			call allocOlympians
 00000032  72 73			jc ERROR						; end the program if unable to allocate
 00000034  A3 000000F9 R		mov slistptr, eax				; store a pointer to the heap data

 00000039			REPROMPT_FILE:
					;;;; prompt for the file name 
 00000039  BA 000000BA R	    mov edx, OFFSET prompt2			; output the prompt
 0000003E  E8 00000000 E		call WriteString				; uses edx 

					;;;; read the file name
 00000043  BA 00000000 R		mov edx, OFFSET filename		; point to the start of the file name string
 00000048  B9 00000096			mov ecx, FSIZE				    ; max size for file name
 0000004D  E8 00000000 E		call ReadString					; load the file name (string pointer in edx, max size in ecx)
					
					;;;; open the file, get the file pointer
 00000052  BA 00000000 R		mov edx, OFFSET filename		
 00000057  E8 00000000 E		call OpenInputFile

 0000005C  83 F8 FF			cmp eax, INVALID_HANDLE_VALUE
 0000005F  75 11			jne ACCEPT_FILE					; has an error occured opening the file?
 00000061  BA 000000CD R		mov edx, OFFSET ferror
 00000066  E8 00000000 E		call WriteString
 0000006B  E8 00000000 E		call Crlf
 00000070  EB C7			jmp REPROMPT_FILE

 00000072			ACCEPT_FILE:
 00000072  A3 00000096 R		mov filehandle, eax				; store the file pointer

					;;;; load the olympian information
 00000077  FF 35 000000F9 R		push slistptr					; push arguments to loadALLOlympians
 0000007D  FF 35 00000096 R		push filehandle
 00000083  FF 35 000000F5 R		push maxnum
 00000089  E8 0000013E			call loadAllOlympians

					;;;; output the olympian information
 0000008E  FF 35 000000F9 R		push slistptr
 00000094  50				push eax						; eax holds the number of olympians read
 00000095  E8 000001C6			call outputAllOlympians

					;;;; close the file
 0000009A  FF 35 00000096 R		push filehandle
 000000A0  E8 00000000 E		call CloseHandle
 000000A5  EB 0F			jmp DONE

 000000A7			ERROR:
 000000A7  BA 000000DE R		mov edx, OFFSET perror			; something went horribly wrong
 000000AC  E8 00000000 E		call WriteString
 000000B1  E8 00000000 E		call Crlf

 000000B6			DONE:
 000000B6  E8 00000000 E		call WaitMsg					; wait for user to hit enter
					invoke ExitProcess,0			; bye
 000000C2			main ENDP

				; description:
				;	read a character from a file
				; receives (in reverse order):
 000000C2			readFileChar PROC
				;	[ebp+8]  = file pointer
				; returns:
				;	eax = character read, or system error code if carry flag is set

 000000C2  55				push ebp						; save the base pointer
 000000C3  8B EC			mov ebp,esp						; base of the stack frame
 000000C5  83 EC 04			sub esp,4						; create a local variable for the return value
 000000C8  52				push edx						; save the registers
 000000C9  51				push ecx

 000000CA  8B 45 08			mov eax,[ebp+8]					; file pointer
 000000CD  8D 55 FC			lea edx,[ebp-4]					; pointer to value read
 000000D0  B9 00000001			mov ecx,1						; number of chars to read
 000000D5  E8 00000000 E		call ReadFromFile				; gets file handle from eax (loaded above)
 000000DA  72 03			jc DONE							; if CF is set, leave the error code in eax
 000000DC  8B 45 FC			mov eax,[ebp-4]					; otherwise, copy the char read from local variable

 000000DF			DONE:
 000000DF  59				pop ecx							; restore the registers
 000000E0  5A				pop edx
 000000E1  8B E5			mov esp,ebp						; remove local var from stack 
 000000E3  5D				pop ebp
 000000E4  C2 0004			ret 4
 000000E7			readFileChar ENDP

				; description:
				;	allocates sufficient memory from to store the inputted number of olypian structs
				; receives (in reverse order):
 000000E7			allocOlympians PROC,
					ssize: DWORD	; the number of structs in the array
				; returns:
				;	eax = a pointer to the allocated array, or carry flag if error

 000000EA  8B 45 08			mov eax, ssize
 000000ED  6B C0 4C			imul eax, SIZEOF OLYMPIAN	; calculate number of bytes needed to allocate
 000000F0  74 1A			jz ERROR
 000000F2  89 45 08			mov ssize, eax
					
 000000F5  E8 00000000 E		call GetProcessHeap			; get a handle to this process heap in EAX
 000000FA  FF 75 08			push ssize					; requested size of allocation
 000000FD  6A 08			push HEAP_ZERO_MEMORY		; zero out all data in the allocation
 000000FF  50				push eax					; handle to process heap
 00000100  E8 00000000 E		call HeapAlloc
 00000105  83 F8 00			cmp eax, 0					; NULL pointer?
 00000108  74 02			je ERROR
 0000010A  EB 01			jmp DONE

 0000010C			ERROR:
 0000010C  F9				stc							; return with CF = 0

 0000010D			DONE:
					ret
 00000111			allocOlympians ENDP

				; description:
				;	reads a line from the specified filepointer/filehandle, 
				;	and puts it into stringpointer buffer, up to stringsize characters
				; receives (in reverse order):
 00000111			readFileLine PROC uses EBX ESI,
					stringsize: DWORD,		; maximum size of the buffer
					stringpointer: DWORD,	; pointer to the string buffer
					filepointer: DWORD,		; pointer to the filehandle
				; returns:
				;	eax = the number of characters read and stored in the target array

 00000116  FF 75 08			push stringsize				; save the arguments to restore later
 00000119  FF 75 0C			push stringpointer

 0000011C  BB 00000000			mov ebx, 0					; EBX will hold count of characters loaded
 00000121  8B 75 0C			mov esi, stringpointer		; load the address of the string buffer

 00000124			NEXT_CHAR:
 00000124  FF 75 10			push filepointer
 00000127  E8 FFFFFF96			call readFileChar			; load a character
 0000012C  72 18			jc ERROR

 0000012E  3C 0D			cmp al, CR					; if the loaded character was a carriage return, ignore
 00000130  74 F2			jz NEXT_CHAR

 00000132  FF 4D 08			dec stringsize				; there is one less byte available in the buffer
 00000135  74 0A			jz NULL_TERMINATE			; terminate string and leave

 00000137  3C 0A			cmp al, LF					; if the loaded character was a line fead, null terminate
 00000139  74 06			jz NULL_TERMINATE

 0000013B  43				inc ebx						; increment the characters read
 0000013C  88 06			mov BYTE PTR [esi], al		; store the character in string array
 0000013E  46				inc esi						; point to next position in string array
 0000013F  EB E3			jmp NEXT_CHAR

 00000141			NULL_TERMINATE:
 00000141  C6 06 00			mov BYTE PTR [esi], NULL	; null terminate the string
 00000144  EB 01			jmp DONE

 00000146			ERROR:
 00000146  F9				stc

 00000147			DONE:
 00000147  8F 45 0C			pop stringpointer
 0000014A  8F 45 08			pop stringsize				; restore the arguments previously saved

 0000014D  8B C3			mov eax, ebx				; eax returns the number of characters read/stored
					ret
 00000155			readFileLine ENDP

				; description:	
				;	reads information from a file and loads it into an olympian struct.
				; recieves (in reverse order):
 00000155			loadOlympian PROC uses ESI EDI ECX EDX,
					filepointer: DWORD,			; the pointer to the file read from
					structpointer: DWORD		; the pointer to the memory to write the struct
					local stringbuffer[STRSIZE]: BYTE
				; returns:
				;	eax = updated file pointer, which has been advanced past the information just loaded
				; error:
				;	carry = set
					
 0000015F  8B 75 0C			mov esi, [structpointer]	; esi points to the struct on the heap

 00000162  FF 75 08			push filepointer			; push arguments to readFileline
 00000165  8D 7D E0			lea edi, stringbuffer
 00000168  57				push edi					; loads local string for checking if properly formatted
 00000169  6A 20			push STRSIZE
 0000016B  E8 FFFFFFA1			call readFileLine
 00000170  72 4E			jc ERROR
 00000172  80 7D E0 2A			cmp stringbuffer, ASTERISK	; properly formatted has '*' at beginning
 00000176  75 48			jnz ERROR

 00000178  FF 75 08			push filepointer			; load the name
 0000017B  56				push esi
 0000017C  6A 20			push STRSIZE
 0000017E  E8 FFFFFF8E			call readFileLine
 00000183  72 3B			jc ERROR

 00000185  83 C6 20			add esi, SIZEOF OLYMPIAN.sname

 00000188  FF 75 08			push filepointer			; load the country
 0000018B  56				push esi
 0000018C  6A 20			push STRSIZE
 0000018E  E8 FFFFFF7E			call readFileLine
 00000193  72 2B			jc ERROR

 00000195  83 C6 20			add esi, SIZEOF OLYMPIAN.country

 00000198  B9 00000003			mov ecx, NUMTESTS			; repeat for the number of medals
 0000019D			LOAD_MEDAL:
 0000019D  FF 75 08			push filepointer			; load goal medals INTO buffer
 000001A0  57				push edi
 000001A1  6A 20			push STRSIZE
 000001A3  E8 FFFFFF69			call readFileLine
 000001A8  72 16			jc ERROR

 000001AA  51				push ecx					; store loop counter
 000001AB  8B C8			mov ecx, eax				; move the number of characters read into ecx
 000001AD  8B D7			mov edx, edi				; store pointer to stringbuffer in edx
 000001AF  E8 00000000 E		call ParseInteger32
 000001B4  70 0A			jo ERROR					; if parsing error, exit

 000001B6  89 06			mov [esi], eax				; write medal amount to struct
 000001B8  83 C6 04			add esi, SIZEOF MEDAL		; increment to next medal
 000001BB  59				pop ecx						; restore loop counter
 000001BC  E2 DF			loop LOAD_MEDAL
 000001BE  EB 01			jmp DONE

 000001C0			ERROR:
 000001C0  F9				stc

 000001C1			DONE:
 000001C1  8B 45 08			mov eax, filepointer
					ret
 000001CC			loadOlympian ENDP

				; description:
				;	makes successive calls to loadOlympian to read olympian information from a 
				;	file into an array of olympian structs
				; receives (in reverse order):
 000001CC			loadAllOlympians PROC uses ESI ECX EBX,
					maxOlympians: DWORD,		; the max olympians to be read
					filepointer: DWORD,			; pointer to the file
					structpointer: DWORD		; pointer to struct on the heap
				; returns:
				;	eax = number of olympians actually read

 000001D2  BB 00000000			mov ebx, 0					; zero olympians have been read initially
 000001D7  8B 75 10			mov esi, structpointer		;
 000001DA  8B 4D 08			mov ecx, maxOlympians		; prepare loop
 000001DD			LOAD_OLYMPIAN:
 000001DD  56				push esi					; push pointer to current place of struct array
 000001DE  FF 75 0C			push filepointer
 000001E1  E8 FFFFFF6F			call loadOlympian
 000001E6  72 06			jc ERROR
 000001E8  43				inc ebx						; one more olympian has been read
 000001E9  83 C6 4C			add esi, SIZEOF OLYMPIAN	; increment to next olympian in array
 000001EC  E2 EF			loop LOAD_OLYMPIAN

 000001EE			ERROR:
 000001EE  8B C3			mov eax, ebx				; return number of olympians read in eax
					ret

 000001F7			loadAllOlympians ENDP

				; description:
				;	Outputs the contents of one olympian struct to the console in a 
				;	well formatted manner.
				; receives (in reverse order):
 000001F7			outputOlympian PROC uses ESI EDX ECX EAX,
					structpointer: DWORD,		; pointer to the struct
				; returns:
				;	there is no return value for this proc

 000001FE  8B 75 08			mov esi, structpointer				; esi holds a pointer to beginning of struct

 00000201  BA 00000101 R		mov edx, OFFSET outname				; output the olympians name
 00000206  E8 00000000 E		call WriteString
 0000020B  8B D6			mov edx, esi
 0000020D  E8 00000000 E		call WriteString
 00000212  E8 00000000 E		call Crlf
 00000217  83 C6 20			add esi, SIZEOF OLYMPIAN.sname		; move pointer to country

 0000021A  BA 0000010C R		mov edx, OFFSET outcountry			; output the olympians country
 0000021F  E8 00000000 E		call WriteString
 00000224  8B D6			mov edx, esi
 00000226  E8 00000000 E		call WriteString
 0000022B  E8 00000000 E		call Crlf
 00000230  83 C6 20			add esi, SIZEOF OLYMPIAN.country	; move pointer to gold medals
					
 00000233  B9 00000003			mov ecx, NUMTESTS
 00000238  B8 00000000			mov eax, 0							; ebx holds the sum of the medals
 0000023D			SUM_MEDAL:
 0000023D  03 06			add eax, MEDAL PTR [esi]
 0000023F  83 C6 04			add esi, SIZEOF MEDAL
 00000242  E2 F9			loop SUM_MEDAL

 00000244  BA 00000116 R		mov edx, OFFSET outmedals
 00000249  E8 00000000 E		call WriteString
 0000024E  E8 00000000 E		call WriteDec						; writes sum of medals
 00000253  E8 00000000 E		call Crlf
					
					ret
 00000260			outputOlympian ENDP

				; description:
				;	output the entire array of Olympians to the console by successively
				;	calling outputOlympian
				; receives (in reverse order):
 00000260			outputAllOlympians PROC uses ESI,
					maxOlympians: DWORD,		; number of olympians to output
					structpointer: DWORD,		; pointer to array of olympians
				; returns:
				;	there is no return value for this proc
					
 00000264  8B 75 0C			mov esi, structpointer		; esi points to the struct on the heap

 00000267  E8 00000000 E		call Crlf
 0000026C  8B 4D 08			mov ecx, maxOlympians		; repeat for requested olympians
 0000026F			OUTPUT_OLYMPIAN:
 0000026F  56				push esi
 00000270  E8 FFFFFF82			call outputOlympian			; output an olympian
 00000275  83 C6 4C			add esi, SIZEOF OLYMPIAN	; move to next olympian
 00000278  E8 00000000 E		call Crlf
 0000027D  E2 F0			loop OUTPUT_OLYMPIAN

					ret
 00000284			outputAllOlympians ENDP

				END main
Microsoft (R) Macro Assembler Version 14.37.32825.0	    12/09/23 21:48:23
olympians.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord
olympian . . . . . . . . . . . .	 0000004C
  sname  . . . . . . . . . . . .	 00000000	 Byte
  country  . . . . . . . . . . .	 00000020	 Byte
  medals . . . . . . . . . . . .	 00000040	 DWord


Types:

                N a m e                  Size     Attr

MEDAL  . . . . . . . . . . . . .	 00000004     DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000011F Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000284 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
allocOlympians . . . . . . . . .	P Near	 000000E7 _TEXT	Length= 0000002A Public STDCALL
  ssize  . . . . . . . . . . . .	DWord	 bp + 00000008
  ERROR  . . . . . . . . . . . .	L Near	 0000010C _TEXT	
  DONE . . . . . . . . . . . . .	L Near	 0000010D _TEXT	
loadAllOlympians . . . . . . . .	P Near	 000001CC _TEXT	Length= 0000002B Public STDCALL
  maxOlympians . . . . . . . . .	DWord	 bp + 00000008
  filepointer  . . . . . . . . .	DWord	 bp + 0000000C
  structpointer  . . . . . . . .	DWord	 bp + 00000010
  LOAD_OLYMPIAN  . . . . . . . .	L Near	 000001DD _TEXT	
  ERROR  . . . . . . . . . . . .	L Near	 000001EE _TEXT	
loadOlympian . . . . . . . . . .	P Near	 00000155 _TEXT	Length= 00000077 Public STDCALL
  filepointer  . . . . . . . . .	DWord	 bp + 00000008
  structpointer  . . . . . . . .	DWord	 bp + 0000000C
  stringbuffer . . . . . . . . .	Byte	 bp - 00000020
  LOAD_MEDAL . . . . . . . . . .	L Near	 0000019D _TEXT	
  ERROR  . . . . . . . . . . . .	L Near	 000001C0 _TEXT	
  DONE . . . . . . . . . . . . .	L Near	 000001C1 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000C2 Public STDCALL
  REPROMPT_NUM . . . . . . . . .	L Near	 00000000 _TEXT	
  ACCEPT_NUM . . . . . . . . . .	L Near	 00000022 _TEXT	
  REPROMPT_FILE  . . . . . . . .	L Near	 00000039 _TEXT	
  ACCEPT_FILE  . . . . . . . . .	L Near	 00000072 _TEXT	
  ERROR  . . . . . . . . . . . .	L Near	 000000A7 _TEXT	
  DONE . . . . . . . . . . . . .	L Near	 000000B6 _TEXT	
outputAllOlympians . . . . . . .	P Near	 00000260 _TEXT	Length= 00000024 Public STDCALL
  maxOlympians . . . . . . . . .	DWord	 bp + 00000008
  structpointer  . . . . . . . .	DWord	 bp + 0000000C
  OUTPUT_OLYMPIAN  . . . . . . .	L Near	 0000026F _TEXT	
outputOlympian . . . . . . . . .	P Near	 000001F7 _TEXT	Length= 00000069 Public STDCALL
  structpointer  . . . . . . . .	DWord	 bp + 00000008
  SUM_MEDAL  . . . . . . . . . .	L Near	 0000023D _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readFileChar . . . . . . . . . .	P Near	 000000C2 _TEXT	Length= 00000025 Public STDCALL
  DONE . . . . . . . . . . . . .	L Near	 000000DF _TEXT	
readFileLine . . . . . . . . . .	P Near	 00000111 _TEXT	Length= 00000044 Public STDCALL
  stringsize . . . . . . . . . .	DWord	 bp + 00000008
  stringpointer  . . . . . . . .	DWord	 bp + 0000000C
  filepointer  . . . . . . . . .	DWord	 bp + 00000010
  NEXT_CHAR  . . . . . . . . . .	L Near	 00000124 _TEXT	
  NULL_TERMINATE . . . . . . . .	L Near	 00000141 _TEXT	
  ERROR  . . . . . . . . . . . .	L Near	 00000146 _TEXT	
  DONE . . . . . . . . . . . . .	L Near	 00000147 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ASTERISK . . . . . . . . . . . .	Number	 0000002Ah   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CR . . . . . . . . . . . . . . .	Number	 0000000Dh   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FSIZE  . . . . . . . . . . . . .	Number	 00000096h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LF . . . . . . . . . . . . . . .	Number	 0000000Ah   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
NUMTESTS . . . . . . . . . . . .	Number	 00000003h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ROUND  . . . . . . . . . . . . .	Number	 00000001h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
SPACE  . . . . . . . . . . . . .	Number	 00000020h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
STRSIZE  . . . . . . . . . . . .	Number	 00000020h   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
ferror . . . . . . . . . . . . .	Byte	 000000CD _DATA	
filehandle . . . . . . . . . . .	DWord	 00000096 _DATA	
filename . . . . . . . . . . . .	Byte	 00000000 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxnum . . . . . . . . . . . . .	DWord	 000000F5 _DATA	
numread  . . . . . . . . . . . .	DWord	 000000FD _DATA	
outcountry . . . . . . . . . . .	Byte	 0000010C _DATA	
outmedals  . . . . . . . . . . .	Byte	 00000116 _DATA	
outname  . . . . . . . . . . . .	Byte	 00000101 _DATA	
perror . . . . . . . . . . . . .	Byte	 000000DE _DATA	
prompt1  . . . . . . . . . . . .	Byte	 0000009A _DATA	
prompt2  . . . . . . . . . . . .	Byte	 000000BA _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
slistptr . . . . . . . . . . . .	DWord	 000000F9 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
